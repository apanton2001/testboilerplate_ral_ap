name: Backend CI/CD

on:
  push:
    branches: [main]
    paths:
      - 'backend/**'
      - '.github/workflows/backend.yml'
  pull_request:
    branches: [main]
    paths:
      - 'backend/**'
      - '.github/workflows/backend.yml'

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './backend/package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npx eslint .

  test:
    name: Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    needs: lint
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: customs_docs_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './backend/package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Create test database schema
        run: |
          PGPASSWORD=postgres psql -h localhost -U postgres -d customs_docs_test -f database/schema.sql
        env:
          PGPASSWORD: postgres

      - name: Run unit tests
        run: npm test
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_NAME: customs_docs_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          JWT_SECRET: test_jwt_secret

  build:
    name: Build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './backend/package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Create build directory
        run: |
          mkdir -p build
          cp -r src package.json package-lock.json build/
          cd build && npm ci --production

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: backend-build
          path: backend/build
          retention-days: 7

  deploy:
    name: Deploy to AWS Elastic Beanstalk
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' # Only deploy on main branch
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: backend-build
          path: backend/build

      - name: Generate deployment package
        run: |
          cd backend/build
          zip -r ../deploy.zip .

      - name: Deploy to Elastic Beanstalk
        uses: einaregilsson/beanstalk-deploy@v21
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: customs-documentation-backend
          environment_name: customs-documentation-backend-prod
          version_label: ${{ github.sha }}
          region: us-east-1
          deployment_package: backend/deploy.zip
          wait_for_environment_recovery: 300

      - name: Set deployment URL
        id: deploy
        run: echo "url=http://customs-documentation-backend-prod.us-east-1.elasticbeanstalk.com" >> $GITHUB_OUTPUT